#!/usr/bin/env node

'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var run = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _args$, port, query, url, browser, HeadlessChrome, _run, _ref2, output;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _args$ = args[2], port = _args$ === undefined ? 8888 : _args$, query = args[3];
            url = 'http://localhost:' + port + '/consoleRunner';

            if (query) url += '/?' + query;
            browser = void 0;
            _context.prev = 4;
            HeadlessChrome = require('simple-headless-chrome');

            browser = new HeadlessChrome({ headless: true });
            _context.next = 9;
            return browser.init();

          case 9:
            _context.next = 11;
            return browser.goTo(url);

          case 11:
            _context.next = 13;
            return browser.onConsole(function (args) {
              console.error((0, _stringify2.default)({ id: ':consoleMessage', message: args.map(function (arg) {
                  return arg.value;
                }).join('') }));
            });

          case 13:
            _run = require('./chrome_evaluate');
            _context.next = 16;
            return browser.evaluateAsync(_run);

          case 16:
            _ref2 = _context.sent;
            output = _ref2.result.value;

            output.forEach(function (line) {
              return console.error(line);
            });

          case 19:
            _context.prev = 19;
            _context.next = 22;
            return browser;

          case 22:
            _context.t0 = _context.sent;

            if (!_context.t0) {
              _context.next = 25;
              break;
            }

            browser.close(true);

          case 25:
            return _context.finish(19);

          case 26:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[4,, 19, 26]]);
  }));

  return function run() {
    return _ref.apply(this, arguments);
  };
}();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('babel-polyfill');

run.apply(undefined, process.argv);