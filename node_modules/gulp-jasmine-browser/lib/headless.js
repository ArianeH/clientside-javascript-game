'use strict';

exports.__esModule = true;
exports.chrome = exports.phantomjs = exports.slimerjs = exports.server = exports.headless = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _lazypipe = require('lazypipe');

var _lazypipe2 = _interopRequireDefault(_lazypipe);

var _server = require('./server');

var _path = require('path');

var _qs = require('qs');

var _child_process = require('child_process');

var _through = require('through2');

var _through2Reduce = require('through2-reduce');

var _jasmineProfileReporter = require('jasmine-profile-reporter');

var _jasmineProfileReporter2 = _interopRequireDefault(_jasmineProfileReporter);

var _jasmineTerminalReporter = require('jasmine-terminal-reporter');

var _jasmineTerminalReporter2 = _interopRequireDefault(_jasmineTerminalReporter);

var _toReporter = require('jasmine-json-stream-reporter/to-reporter');

var _toReporter2 = _interopRequireDefault(_toReporter);

var _split = require('split2');

var _split2 = _interopRequireDefault(_split);

var _flatMap = require('flat-map');

var _flatMap2 = _interopRequireDefault(_flatMap);

var _lodash = require('lodash.once');

var _lodash2 = _interopRequireDefault(_lodash);

var _chrome = require('./drivers/chrome');

var _chrome2 = _interopRequireDefault(_chrome);

var _phantomjs = require('./drivers/phantomjs');

var _phantomjs2 = _interopRequireDefault(_phantomjs);

var _phantomjs3 = require('./drivers/phantomjs1');

var _phantomjs4 = _interopRequireDefault(_phantomjs3);

var _slimerjs = require('./drivers/slimerjs');

var _slimerjs2 = _interopRequireDefault(_slimerjs);

var _portastic = require('portastic');

var _portastic2 = _interopRequireDefault(_portastic);

var _helper = require('./helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_JASMINE_PORT = 8888;

var drivers = {
  chrome: _chrome2.default,
  phantomjs: _phantomjs2.default,
  phantomjs1: _phantomjs4.default,
  slimerjs: _slimerjs2.default,
  _default: _phantomjs2.default
};

function onError(message) {
  try {
    var _require = require('gulp-util'),
        PluginError = _require.PluginError;

    return new PluginError('gulp-jasmine-browser', { message: message, showProperties: false });
  } catch (e) {
    return new Error(message);
  }
}

function startServer(files, options) {
  var port = options.port;

  if (!port) return _portastic2.default.find({ min: 8000, max: DEFAULT_JASMINE_PORT, retrieve: 1 }).then(function (_ref) {
    var port = _ref[0];
    return (0, _server.listen)(port, files, options);
  });
  return (0, _server.listen)(port, files, options);
}

function defaultReporters(options, profile) {
  return (0, _helper.compact)([new _jasmineTerminalReporter2.default(options), profile && new _jasmineProfileReporter2.default(options)]);
}

function findOrStartServer(options) {
  function helper(port, files) {
    if (!port) return startServer(files, options);
    return _portastic2.default.test(port).then(function (isOpen) {
      if (!isOpen) return { server: { close: function close() {} }, port: port };
      return startServer(files, options);
    });
  }

  return (0, _through.obj)(function (files, enc, next) {
    return helper(options.port, files).then(function (i) {
      return next(null, i);
    }).catch(next);
  });
}

function createServer(options) {
  var _options$driver = options.driver,
      driver = _options$driver === undefined ? 'phantomjs' : _options$driver,
      file = options.file,
      random = options.random,
      throwFailures = options.throwFailures,
      spec = options.spec,
      seed = options.seed,
      reporter = options.reporter,
      profile = options.profile,
      onCoverage = options.onCoverage,
      onSnapshot = options.onSnapshot,
      _options$onConsoleMes = options.onConsoleMessage,
      onConsoleMessage = _options$onConsoleMes === undefined ? function () {
    var _console;

    return (_console = console).log.apply(_console, arguments);
  } : _options$onConsoleMes,
      opts = (0, _objectWithoutProperties3.default)(options, ['driver', 'file', 'random', 'throwFailures', 'spec', 'seed', 'reporter', 'profile', 'onCoverage', 'onSnapshot', 'onConsoleMessage']);

  var query = (0, _qs.stringify)({ catch: options.catch, file: file, random: random, throwFailures: throwFailures, spec: spec, seed: seed });

  var _drivers = drivers[driver in drivers ? driver : '_default'](),
      command = _drivers.command,
      runner = _drivers.runner,
      output = _drivers.output;

  var stream = (0, _lazypipe2.default)().pipe(function () {
    return (0, _through2Reduce.obj)(function (memo, file) {
      return memo[file.relative] = file.contents, memo;
    }, {});
  }).pipe(function () {
    return findOrStartServer(options);
  }).pipe(function () {
    return (0, _flatMap2.default)(function (_ref2, next) {
      var server = _ref2.server,
          port = _ref2.port;

      var stdio = ['pipe', output === 'stdout' ? 'pipe' : 1, output === 'stderr' ? 'pipe' : 2];
      var phantomProcess = (0, _child_process.spawn)(command, (0, _helper.compact)([runner, port, query]), { cwd: (0, _path.resolve)(__dirname, './runners'), stdio: stdio });
      phantomProcess.on('close', function () {
        return server.close();
      });
      ['SIGINT', 'SIGTERM'].forEach(function (e) {
        return process.once(e, function () {
          return phantomProcess && phantomProcess.kill();
        });
      });
      next(null, phantomProcess[output].pipe((0, _split2.default)(_helper.parse)));
    });
  }).pipe(function () {
    return (0, _toReporter2.default)(reporter || defaultReporters(opts, profile), { onError: onError, onConsoleMessage: onConsoleMessage, onCoverage: onCoverage, onSnapshot: onSnapshot });
  });
  return stream();
}

function createServerWatch(options) {
  var files = {};
  var createServerOnce = (0, _lodash2.default)(function () {
    return startServer(files, options);
  });
  return (0, _lazypipe2.default)().pipe(function () {
    return (0, _through.obj)(function (file, enc, next) {
      files[file.relative] = file.contents;
      createServerOnce();
      next(null, file);
    });
  })();
}

function headless() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return createServer(options);
}

function server() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return createServerWatch((0, _extends3.default)({ port: DEFAULT_JASMINE_PORT }, options));
}

var _map = ['slimerjs', 'phantomjs', 'chrome'].map(function (driver) {
  return function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return headless((0, _extends3.default)({}, options, { driver: driver }));
  };
}),
    slimerjs = _map[0],
    phantomjs = _map[1],
    chrome = _map[2];

exports.headless = headless;
exports.server = server;
exports.slimerjs = slimerjs;
exports.phantomjs = phantomjs;
exports.chrome = chrome;